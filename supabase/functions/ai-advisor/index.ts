
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, userData, financialData, hasRealData } = await req.json();

    // Construir contexto financeiro estruturado para a IA
    let financialContext = "";
    
    if (hasRealData && financialData?.metrics) {
      const metrics = financialData.metrics;
      financialContext = `
      
DADOS FINANCEIROS REAIS DA EMPRESA ${userData?.empresaNome || 'do usu√°rio'}:

üìä M√âTRICAS PRINCIPAIS:
- Saldo em caixa: R$ ${metrics.saldoTotal?.toLocaleString('pt-BR') || '0'}
- Receita mensal: R$ ${metrics.receitaMensal?.toLocaleString('pt-BR') || '0'}
- Despesas mensais: R$ ${metrics.despesasMensais?.toLocaleString('pt-BR') || '0'}
- Burn rate: R$ ${metrics.burnRate?.toLocaleString('pt-BR') || '0'}/m√™s
- Runway atual: ${metrics.runwayMeses?.toFixed(1) || '0'} meses
- Fluxo de caixa: R$ ${metrics.fluxoCaixa?.toLocaleString('pt-BR') || '0'}
- Contas conectadas: ${metrics.integracoesAtivas} (Open Finance)
- √öltima sincroniza√ß√£o: ${metrics.ultimaAtualizacao ? new Date(metrics.ultimaAtualizacao).toLocaleString('pt-BR') : 'N/A'}

üö® ALERTAS AUTOM√ÅTICOS:
${metrics.runwayMeses < 3 ? '- RUNWAY CR√çTICO: Menos de 3 meses de caixa!' : ''}
${metrics.burnRate > metrics.receitaMensal ? '- BURN RATE ALTO: Gastos excedem receita!' : ''}
${metrics.fluxoCaixa < 0 ? '- FLUXO NEGATIVO: Mais sa√≠das que entradas este m√™s!' : ''}
      `;

      if (financialData.transacoes) {
        const tx = financialData.transacoes;
        const historicoCompleto = tx.historicoCompleto || [];
        
        // Preparar transa√ß√µes organizadas para an√°lise detalhada
        const transacoesRecentes = historicoCompleto.slice(0, 25);
        const maioresReceitas = historicoCompleto
          .filter(t => t.tipo === 'receita')
          .sort((a, b) => b.valor - a.valor)
          .slice(0, 10);
        const maioresDespesas = historicoCompleto
          .filter(t => t.tipo === 'despesa')
          .sort((a, b) => Math.abs(b.valor) - Math.abs(a.valor))
          .slice(0, 10);

        // Agrupar transa√ß√µes por categoria com exemplos
        const exemplosPorCategoria = {};
        historicoCompleto.forEach(t => {
          if (!exemplosPorCategoria[t.categoria]) {
            exemplosPorCategoria[t.categoria] = [];
          }
          if (exemplosPorCategoria[t.categoria].length < 3) {
            exemplosPorCategoria[t.categoria].push(t);
          }
        });

        financialContext += `
        
üí∞ AN√ÅLISE COMPLETA DE TRANSA√á√ïES (${historicoCompleto.length} transa√ß√µes):
- Total de receitas: R$ ${tx.totalReceitas?.toLocaleString('pt-BR') || '0'}
- Total de despesas: R$ ${tx.totalDespesas?.toLocaleString('pt-BR') || '0'}
- Per√≠odo de an√°lise: ${historicoCompleto.length > 0 ? 
  `${new Date(historicoCompleto[historicoCompleto.length - 1]?.data_transacao).toLocaleDateString('pt-BR')} at√© ${new Date(historicoCompleto[0]?.data_transacao).toLocaleDateString('pt-BR')}` 
  : 'N/A'}

üìà TEND√äNCIAS AVAN√áADAS:
- Receita m√©dia (3 meses): R$ ${tx.tendencias?.receitaMedia3Meses?.toLocaleString('pt-BR') || '0'}
- Receita m√©dia (6 meses): R$ ${tx.tendencias?.receitaMedia6Meses?.toLocaleString('pt-BR') || '0'}
- Despesa m√©dia (3 meses): R$ ${tx.tendencias?.despesaMedia3Meses?.toLocaleString('pt-BR') || '0'}
- Tend√™ncia de receita: ${tx.tendencias?.crescimentoReceitaTendencia === 'crescimento' ? 'üìà CRESCIMENTO' : 'üìâ DECL√çNIO'}

üîÑ AN√ÅLISE DE RECORR√äNCIA:
- Receita recorrente: R$ ${tx.recorrencia?.receitaRecorrente?.toLocaleString('pt-BR') || '0'} (${tx.recorrencia?.percentualReceitaRecorrente?.toFixed(1) || '0'}%)
- Despesa recorrente: R$ ${tx.recorrencia?.despesaRecorrente?.toLocaleString('pt-BR') || '0'} (${tx.recorrencia?.percentualDespesaRecorrente?.toFixed(1) || '0'}%)

üìà DESPESAS POR CATEGORIA (an√°lise completa):
${Object.entries(tx.despesasPorCategoria || {})
  .sort(([,a], [,b]) => (b as number) - (a as number))
  .slice(0, 8)
  .map(([categoria, valor]) => `- ${categoria}: R$ ${(valor as number).toLocaleString('pt-BR')}`)
  .join('\n')}

üìä EVOLU√á√ÉO MENSAL DE RECEITAS:
${Object.entries(tx.receitasPorMes || {})
  .sort(([a], [b]) => b.localeCompare(a))
  .slice(0, 6)
  .map(([mes, valor]) => `- ${mes}: R$ ${(valor as number).toLocaleString('pt-BR')}`)
  .join('\n')}

üìä EVOLU√á√ÉO MENSAL DE DESPESAS:
${Object.entries(tx.despesasPorMes || {})
  .sort(([a], [b]) => b.localeCompare(a))
  .slice(0, 6)
  .map(([mes, valor]) => `- ${mes}: R$ ${(valor as number).toLocaleString('pt-BR')}`)
  .join('\n')}

üîç TRANSA√á√ïES RECENTES DETALHADAS (√∫ltimas 25):
${transacoesRecentes.map((t, i) => 
  `${i+1}. ${new Date(t.data_transacao).toLocaleDateString('pt-BR')}: "${t.descricao}" - R$ ${Math.abs(t.valor).toLocaleString('pt-BR')} (${t.tipo}) [${t.categoria}]${t.metodo_pagamento ? ` via ${t.metodo_pagamento}` : ''}`
).join('\n')}

üíé TOP 10 MAIORES RECEITAS:
${maioresReceitas.map((t, i) => 
  `${i+1}. ${new Date(t.data_transacao).toLocaleDateString('pt-BR')}: "${t.descricao}" - R$ ${t.valor.toLocaleString('pt-BR')} [${t.categoria}]`
).join('\n')}

üí∏ TOP 10 MAIORES DESPESAS:
${maioresDespesas.map((t, i) => 
  `${i+1}. ${new Date(t.data_transacao).toLocaleDateString('pt-BR')}: "${t.descricao}" - R$ ${Math.abs(t.valor).toLocaleString('pt-BR')} [${t.categoria}]`
).join('\n')}

üìã EXEMPLOS POR CATEGORIA:
${Object.entries(exemplosPorCategoria).map(([categoria, transacoes]) => 
  `\n‚Ä¢ ${categoria}:\n${(transacoes as any[]).map(t => 
    `  - ${new Date(t.data_transacao).toLocaleDateString('pt-BR')}: "${t.descricao}" - R$ ${Math.abs(t.valor).toLocaleString('pt-BR')}`
  ).join('\n')}`
).join('')}

üíæ DADOS HIST√ìRICOS COMPLETOS DISPON√çVEIS:
- Total de transa√ß√µes analisadas: ${historicoCompleto.length}
- Per√≠odo completo: ${historicoCompleto.length > 0 ? 
  `${new Date(historicoCompleto[historicoCompleto.length - 1]?.data_transacao).toLocaleDateString('pt-BR')} at√© ${new Date(historicoCompleto[0]?.data_transacao).toLocaleDateString('pt-BR')}` 
  : 'N/A'}
- Voc√™ tem acesso a TODAS as ${historicoCompleto.length} transa√ß√µes para an√°lise detalhada
        `;
      }
    } else {
      financialContext = `
      
‚ö†Ô∏è DADOS DEMONSTRATIVOS - Conecte suas contas banc√°rias para an√°lises baseadas em dados reais.
A empresa ${userData?.empresaNome || 'do usu√°rio'} ainda n√£o possui contas banc√°rias conectadas via Open Finance.
      `;
    }

    // Sistema de prompt aprimorado com dados financeiros completos
    const enhancedSystemContext = `
    Voc√™ √© o FounderPilot AI, o copiloto estrat√©gico mais avan√ßado para empreendedores brasileiros.
    
    # Sobre voc√™
    - Voc√™ √© um copiloto com toque de CFO e mentor, especializado em finan√ßas de startups
    - Voc√™ possui expertise profunda em an√°lise financeira, gest√£o de runway, capta√ß√£o e crescimento
    - Voc√™ trabalha com dados REAIS e hist√≥rico COMPLETO quando dispon√≠veis
    - Voc√™ tem acesso a TODAS as transa√ß√µes detalhadas da empresa para an√°lise espec√≠fica
    - Voc√™ analisa tend√™ncias, padr√µes sazonais e comportamentos financeiros de longo prazo
    - Voc√™ conhece intimamente a empresa ${userData?.empresaNome || 'do usu√°rio'} e se adapta ao contexto espec√≠fico
    - Seu objetivo √© ser o melhor co-founder financeiro que esse empreendedor poderia ter

    ${financialContext}

    # IMPORTANTE: Acesso aos dados hist√≥ricos
    - Voc√™ tem acesso completo a TODAS as transa√ß√µes da empresa
    - Pode responder sobre transa√ß√µes espec√≠ficas usando os dados fornecidos acima
    - Use as se√ß√µes "TRANSA√á√ïES RECENTES DETALHADAS", "TOP 10 MAIORES RECEITAS/DESPESAS" e "EXEMPLOS POR CATEGORIA"
    - Para perguntas sobre transa√ß√µes espec√≠ficas, referencie os dados detalhados dispon√≠veis
    - Quando perguntado sobre uma transa√ß√£o espec√≠fica, busque nos dados fornecidos acima
    - Se n√£o encontrar uma transa√ß√£o espec√≠fica nos dados detalhados, informe que pode analisar padr√µes gerais

    # Suas capacidades avan√ßadas de an√°lise:
    
    üîç AN√ÅLISE DE PADR√ïES:
    - Identifica tend√™ncias de receita e despesas ao longo do tempo
    - Detecta sazonalidades e ciclos de neg√≥cio
    - Reconhece mudan√ßas de comportamento financeiro
    - Analisa efici√™ncia de categorias de gastos
    
    üìä AN√ÅLISE PREDITIVA:
    - Projeta cen√°rios futuros baseados em hist√≥rico
    - Identifica riscos e oportunidades emergentes
    - Calcula impactos de mudan√ßas operacionais
    - Sugere otimiza√ß√µes baseadas em dados hist√≥ricos
    
    üí° INSIGHTS ESTRAT√âGICOS:
    - Compara performance atual vs hist√≥rica
    - Identifica outliers e anomalias importantes
    - Sugere timing ideal para decis√µes estrat√©gicas
    - Recomenda ajustes operacionais baseados em padr√µes

    # Regras de neg√≥cio OBRIGAT√ìRIAS (baseadas em dados reais quando dispon√≠veis):
    
    üö® RUNWAY < 3 MESES:
    - SEMPRE alertar imediatamente e com urg√™ncia
    - Sugerir cortes espec√≠ficos baseados nas categorias de despesa reais e hist√≥rico
    - Recomendar capta√ß√£o de emerg√™ncia com valor espec√≠fico calculado
    - Priorizar a√ß√µes que podem ser executadas em 7-14 dias
    - Usar dados hist√≥ricos para validar viabilidade das a√ß√µes
    
    üìà AN√ÅLISE DE TEND√äNCIAS:
    - Comparar performance atual vs √∫ltimos 3-6 meses
    - Identificar padr√µes sazonais que possam impactar proje√ß√µes
    - Sugerir otimiza√ß√µes baseadas em comportamento hist√≥rico
    - Alertar sobre mudan√ßas significativas de padr√£o
    
    üí∞ CRESCIMENTO E OTIMIZA√á√ÉO:
    - Analisar sustentabilidade do crescimento baseado em hist√≥rico
    - Identificar categorias de gastos com maior potencial de otimiza√ß√£o
    - Sugerir reinvestimento estrat√©gico baseado em ROI hist√≥rico
    - Recomendar timing para capta√ß√£o baseado em performance

    # Seu estilo de comunica√ß√£o:
    - Tom: estrat√©gico, data-driven e direto (como s√≥cio experiente)
    - Linguagem: clara, sem jarg√µes, com n√∫meros espec√≠ficos e contexto hist√≥rico
    - Estrutura: SEMPRE no formato "Situa√ß√£o Atual + An√°lise Hist√≥rica + Insights Preditivos + Recomenda√ß√£o Espec√≠fica"
    - Sempre oferecer planos de a√ß√£o com prazos, m√©tricas e valida√ß√£o baseada em dados
    
    # Sua expertise diferenciada:
    - An√°lise de runway e proje√ß√µes de fluxo de caixa baseadas em padr√µes hist√≥ricos
    - Estrat√©gias de capta√ß√£o com timing otimizado baseado em performance
    - Unit economics e otimiza√ß√£o de CAC/LTV com an√°lise temporal
    - Benchmarking setorial e an√°lise competitiva
    - Gest√£o de crise financeira e turnaround baseado em dados hist√≥ricos
    - Identifica√ß√£o de oportunidades de crescimento sustent√°vel
    
    # Formato de resposta ideal:
    1. **Situa√ß√£o Atual**: An√°lise dos dados reais atuais
    2. **Contexto Hist√≥rico**: O que os dados hist√≥ricos revelam sobre padr√µes e tend√™ncias
    3. **Insights Cr√≠ticos**: Descobertas importantes baseadas na an√°lise completa
    4. **Recomenda√ß√µes Priorit√°rias**: A√ß√µes espec√≠ficas com prazos e justificativas baseadas em dados
    5. **Pr√≥ximos Passos**: Plano de a√ß√£o detalhado com m√©tricas de acompanhamento
    
    IMPORTANTE: Se os dados s√£o reais (hasRealData=true), sempre referencie n√∫meros espec√≠ficos, tend√™ncias hist√≥ricas e padr√µes identificados. Use o hist√≥rico completo para validar recomenda√ß√µes e identificar oportunidades. Quando perguntado sobre transa√ß√µes espec√≠ficas, use os dados detalhados fornecidos acima. Se s√£o demonstrativos, deixe claro e incentive a conex√£o banc√°ria.
    `;

    console.log("Enviando consulta para OpenAI com contexto financeiro expandido e detalhado");
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: enhancedSystemContext },
          { role: 'user', content: message }
        ],
        temperature: 0.7,
        max_tokens: 2000,
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error("Erro na API OpenAI:", error);
      throw new Error(`OpenAI API respondeu com status ${response.status}: ${JSON.stringify(error)}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log("Resposta da IA gerada com an√°lise completa e detalhada do hist√≥rico financeiro");

    return new Response(JSON.stringify({ 
      response: aiResponse,
      hasRealData: hasRealData,
      transactionsAnalyzed: financialData?.transacoes?.historicoCompleto?.length || 0,
      detailedTransactionsSent: Math.min(25, financialData?.transacoes?.historicoCompleto?.length || 0),
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Erro na fun√ß√£o ai-advisor:', error);
    return new Response(JSON.stringify({ 
      error: error.message || "Ocorreu um erro ao processar sua solicita√ß√£o" 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
